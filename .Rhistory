10-6
x[1:10]
10-6
x[1:10]
10-8
10-6
x[1:10]
10-8
setwd("~/Обучение GeekBrains/12. Язык R для анализа данных/Working Directory")
setwd("C:/Users/super_be/Source/Repos/R/Working Directory")
10-6
x[1:10]
10-8
# Основные объекты в R
# 1. Переменная
> x.1 <- 17
# Основные объекты в R
# 1. Переменная
x.1 <- 17
rm(x.1)
# 2.Функция.
# 2.1. Основные математические функции "+", "-", "/", последовательность ":", "*", степень "^", квадратный корень sqrt(), log2(), factorial(), exp()
1+6
1-6
10:2
10*@
10*2
# 2.Функция.
# 2.1. Основные математические функции "+", "-", "/", последовательность ":", "*", степень "^", квадратный корень sqrt(), log2(), factorial(), exp()
1+6
1-6
10:2
10*2
sqrt(25)
log2(8)
log(100)
log10(100)
10^3
exp(1)
sqrt(log2(16))
?log
help(log)
help(log)
# 3. Множества и действия с ними
a<-c(0,1,2,3)
a[2]
b<-c(rep(2, time=3))
b
b.1<-rep(2,4)
a
b.1
a+b.1
seq(1,9,by=2) # четные
seq(2,8,by=2) # четные
seq(1,9,by=2) # нечетные
seq(1,9,length.out=2) # четные
seq(1,10,length.out=2) # четные
seq(1,10,length.out = 5) # четные
s<--1:10
s<-1:10
s
rnorm(n=50,mean=0,sd=1) # Задаем нормальное распределение
rpois(100,10) # Распределение Пуассона
rbinom(100, 10, 0.5) # Биноминальное распределение
rep(c(0,2), each=2)
rep(c(0,2), time=2)
rep(c(0,2), each=2)
# Текстовый вектор
letters
LETTERS
paste(letters, set="_", seq(1,26))
&ISOdate
?ISOdate
format(ISOdate(2019, 9, 1:30), "%d")
format(ISOdate(2019, 9, 1:30), "%b")
paste0(format(ISOdate(2019, 9, 1:30), "%d"), set="_", rep("сен", 30))
# Прочие основные и востребованные функции
# Class(), lehgth(), sum(), mean(), table(), sample()
a<-c(rep(1,10))
a
class(a)
b<-letters
b
class(b)
class(b)
class(2!=0)
class(factorial)
d<- c(rep("a",4),rep("b",6),rep("c",2))
d
sample(d)
d.table<-table(d)
class(d.table)
d.table
r<-seq(10, 1)
r
sum(r)
mean.1<-sum(r)/length(r)
mean.1
mean.2<-mean(r)
mean.2<-mean(r)
mean.2
# Функции set.seed(), sort(), round()
set.seed(1)
popul<-rnorm(100)
popul
popul.1<-round(popul,3)
popul.1
sort(popul.1)
sort(popul.1, decreasing = TRUE)
# sample(), data.frame(), head(), order(), $
set.seed(1)
lets<- sample(letters, 100, replace = TRUE)
lets
lets<- sample(letters, 100, replace = TRUE)
lets
df<-data.frame(lets, popul.1)
head(df)
# Нужно разместить по возрастанию, но теперь каждому значению еще соответствует буква
ind<-order(df@popul.1)
# Нужно разместить по возрастанию, но теперь каждому значению еще соответствует буква
ind<-order(df$popul.1)
ind
df.new<-df[ind,]
head(df.new, 10)
# Что еще можно сделать с векторами?
g<-seq(31,45)
g
length(g)
g[1]
g[c(1,5,15)]
g[-c(1,5,15)]
g[1:5]
h<-1:15
g+h
g+h
g*2
# В пакете "datasets" находится множество наборов, на которых можно совершенствовать свои знания в области R.
data()
data(package = .packages(all.available = TRUE))
library(cluster)
&animals
?animals
animals
# Логические функции и операторы
5>6
61<100
5>6
61<100
2 != 2
3==3
10>=10
12<=12
6>7 | 8>9
6>7 | 10>9
6>7 & 10>9
200 != 200 | 10 <= 6
200 != 100 | 10 <= 6
((TRUE == FALSE) & (1 == 1)) & 100 == 100
((TRUE == FALSE) & (1 == 1)) | 100 == 100
sum(is.na(animals))
is.na(animals)
head(animals,3)
animals$gro
animals$gro[!is.na(animals[,5])]
animals$gro[!is.na(animals$gro)]
animals$gro[!is.na(animals[,5])]
# Извлекаем поднаборы из готовых датасэтов
head(iris,10)
dim(iris)
str(iris)
unique(iris[,5])
levels(iris$Species)
head(iris)
iris[1,1]
traindat<-iris[1:5, c(2,4,5)]
traindat
traindat[traindat$Sepal.Width > 3.0,] # Не забудте о "," в конце!
traindat
traindat[traindat$Sepal.Width > 3.0 & traindat$Petal.Width > 1.4,]
traindat[traindat$Sepal.Width > 3.0 & traindat$Petal.Width > 1.4,]
# Построим свой dataframe
weight<-c(78,56,67,48,69,90)
height<-c(170,160,165,159,170,185)
sex<-(c(rep("F", 3), rep("M", 3)))
sex
df.1<-data.frame(weight, height, sex)
df.1
str(df.1)
df.2<-data.frame(weight, height, sex, stringsAsFactors = TRUE)
df.2
str(df.2)
sex
factor(sex)
# Строим матрицу
m<-1:3
z<-c(10,3)
z
dim(m)
dim(m)<-z
dim(m)<-z
# Строим матрицу
m<-1:30
z<-c(10,3)
z
dim(m)
dim(m)<-z
dim(m)
m
class(m)
## Другой способ
y<-1:50
mt<-matrix(y,10,5)
mt
imena
imena<-LETTERS[1:10]
imena
cbind(imena, mt)
class(cbind(imena,mt))
cbind(imena, mt)[2,]
?rownames
rownames(mt)
colnames(mt)
rownames(mt, do.NULL = FALSE, prefix = "row")
rownames(mt)
rownames(mt)<-imena
mt
colnames(mt)<-paste("day",1:5)
mt
